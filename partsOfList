'''
Write a function partlist that gives all the ways to divide a list (an array) of at least two elements into two non-empty parts.

    Each two non empty parts will be in a pair (or an array for languages without tuples or a structin C - C: see Examples test Cases - )
    Each part will be in a string
    Elements of a pair must be in the same order as in the original array.

Examples of returns in different languages:

["I", "wish", "I", "hadn't", "come"]) > 
    [("I", "wish I hadn't come"), ("I wish", "I hadn't come"), ("I wish I", "hadn't come"), ("I wish I hadn't", "come")]
'''
def partlist(arr):
    l=[]
    for i in range(1,len(arr)):
        s1=" ".join(arr[0:i])
        s2=" ".join(arr[i:])
        l.append((s1,)+(s2,))
    return (l)


#UnitTest
assert(partlist(["cdIw", "tzIy", "xDu", "rThG"])==
    [("cdIw", "tzIy xDu rThG"), ("cdIw tzIy", "xDu rThG"), ("cdIw tzIy xDu", "rThG")])
