"""
Define a function that takes in two numbers a and b and returns the last decimal digit of a^b. Note that a and b may be very large!

For example, the last decimal digit of 9^7 is 9, since 9^7 = 4782969. The last decimal digit of (2^200)^(2^300), which has over 10^92 decimal digits, is 6.

The inputs to your function will always be non-negative integers.
Examples

last_digit(4, 1)                # returns 4
last_digit(4, 2)                # returns 6
last_digit(9, 7)                # returns 9
last_digit(10, 10 ** 10)        # returns 0

"""

class pow():

    def op(self,base,p):
        self.base = base
        self.p = p
        lDig = self.last_dig(self.base)
        return (self.test_pow(lDig, self.p))

    def last_dig(self, n):
        return (n % 10)

    def test_pow(self, base, p):
        temp = 0
        if (p == 0):
            return 1
        if (base in [1, 5, 6, 0]):
            return (base)
        elif (base in [2, 3, 7, 8]):
            temp = p % 4
            return (self.last_dig(base ** temp))
        elif (base in [4, 9]):
            temp = p % 2
            if(temp==0):
                return (self.last_dig(base ** 2))
            else:
                return (self.last_dig(base ** 1))



P = pow()
assert (P.op(4,2) == 6) #Expected 4**2 = 16 ,last no is 6  PASS
assert (P.op(3715290469715693021198967285016729344580685479654510946723, 68819615221552997273737174557165657483427362207517952651) == 7)
assert (P.op(4,2) == 1) #-ve scenario Expected 4**2 = 16 ,last no expected is 1  .Returned is 6
